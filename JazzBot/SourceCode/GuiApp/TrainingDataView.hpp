//
//  TrainingDataView.hpp
//  JazzBotGui
//
//  Created by Tom Harvey on 24/04/2022.
//

#ifndef TrainingDataView_hpp
#define TrainingDataView_hpp

#include <stdio.h>
#include <juce_gui_extra/juce_gui_extra.h>
#include "MidiSequenceView.hpp"
#include "../NoteGrouping/NoteGrouping.hpp"
#include "../SequenceTypes.h"

/**
    @brief This class contains the logic for testing out various algorithms on midi files and applying them to a selection of midi files
           creating database files containing information used for sequence generation. The general idea is that in the
           TrainingDataView various note groupings and analysis from jazz solos can be tested and used to populate the database.
           Then in the GenerateSequence, differrent sequences can be generated by using the data from the various database files.
 */
class TrainingDataView : public juce::Component
                       , public MidiSequenceView::Listener
                       , public juce::Button::Listener
{
public:
    
    
    /**
        @brief A listener used when the  generateSequence view is exited
     */
    class Listener
    {
    public:
        virtual ~Listener() {}
        virtual void returnToMainMenu() = 0;
    };
    
    /**
        @brief Constructor
     */
    TrainingDataView(Listener* listener);
    
    
    /** Overrides juce::Component */
    void paint(juce::Graphics& g) override;
    
    /** Overrides juce::Component */
    void resized() override;
    
    /** Overrides juce::Button::Listener */
    void buttonClicked(juce::Button* button) override;
    
    /** Overrides MidiSequenceView::Listener */
    void updateViewPort(const MidiSequenceView* const changed_view,
                        const int& x_posistion,
                        const int& y_posistion) override;

private:
    
    /** Contains the midi sequence view which displays the original sequence laoded in from a file*/
    MidiSequenceView m_original_sequence;
    
    /** Contains the midi sequence view which displays the modified sequence after the algorithm is applied to it  */
    MidiSequenceView m_modified_sequence;
    
    /** Contains a group of sequenes loaded in from files */
    std::vector<Sequence> m_sequences;
    
    /** Interface to access a selected note grouping algorithm */
    std::unique_ptr<NoteGrouping> m_note_grouping;
    
    /** Listener used to return to main menu*/
    Listener* m_listener;
    
    /** Button used to return to menu*/
    juce::TextButton m_return_to_menu_button;
    
    /** Button used to select a midi file to test algorithm out on*/
    juce::TextButton m_load_file_button;
    
    /** Button used to apply algorithm to selected file in the modified sequence view*/
    juce::TextButton view_algorithm_button;
    
    /** Button used to apply algorithm to a group of files and save analysed grouping data into a database */
    juce::TextButton generate_sequence_data_button;
};

#endif /* TrainingDataView_hpp */
