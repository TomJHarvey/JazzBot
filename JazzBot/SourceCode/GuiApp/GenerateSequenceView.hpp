//
//  GenerateSequenceView.hpp
//  JazzBotGui
//
//  Created by Tom Harvey on 23/06/2022.
//

#ifndef GenerateSequenceView_hpp
#define GenerateSequenceView_hpp

#include <stdio.h>
#include <juce_gui_extra/juce_gui_extra.h>
#include "MidiSequenceView.hpp"
#include "../SequenceTypes.h"
#include "../NoteSequence/NoteSequence.hpp"

/**
    @brief This class contains the logic for generating a sequence. The general idea is that in the TrainingDataView various
           note groupings and analysis from jazz solos can be tested and used to populate the database. Then in this view, differrent
           sequences can be generated by using the data from the various database files.
 */
class GenerateSequenceView : public juce::Component
                           , public MidiSequenceView::Listener
                           , public juce::Button::Listener
{
public:
    
    /**
        @brief A listener used when the  generateSequence view is exited (this needs work)
     */
    class Listener
    {
    public:
        virtual ~Listener() {}
        virtual void exitGenerateSequence() = 0;
    };
    
    /**
        @brief Constructor
     */
    GenerateSequenceView(Listener* listener);
    
    /** Overrides juce::Component */
    void paint(juce::Graphics& g) override;
    
    /** Overrides juce::Component */
    void resized() override;
    
    /** Overrides juce::Button::Listener */
    void buttonClicked(juce::Button* button) override;
    
    /** Overrides MidiSequenceView::Listener */
    void updateViewPort(const MidiSequenceView* const changed_view,
                        const int& x_posistion,
                        const int& y_posistion) override;

private:
    /** Contains the midi sequence view which displays the generated sequence */
    MidiSequenceView m_midi_sequence;
    
    /** Contains the current chord sequence to generate a sequence for */
    ChordSequence m_chord_sequence;
    
    /** Contains the current song information to generate a sequence for */
    SongInformation m_song_information;
    
    /** The chord sequence file to read from */
    juce::File m_chord_sequence_file;
    
    /** The song information file to read from */
    juce::File m_song_information_file;
    
    /** The listener for this class */
    Listener* m_listener;
    
    /** A button used to return to the main menu*/
    juce::TextButton m_return_to_menu_button;
    
    /** A button used to select the current chord sequence*/
    juce::TextButton m_select_chord_sequence_button;
    
    /** A button used to generate a melody*/
    juce::TextButton m_generate_melody_button;
    
    /** Used to point to different types of note sequences used to generate a melody*/
    std::unique_ptr<NoteSequence> m_note_sequence;
};

#endif /* GenerateSequenceView_hpp */
